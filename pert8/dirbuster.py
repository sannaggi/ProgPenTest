import sys
import requests
# Queue akan digunakan untuk membuat antrian kata yang di brute-forece
# seperti Queue di Data Structure, Queue disini juga akan menggunakan pendekatan FIFO
from queue import Queue
from threading import Thread
from getopt import getopt

url = ''
wordlist_file = ''
raw_extension_list = ''
thread = 0
word_queue = Queue()
wordlist = []
extensions = []

def main():
    global url, wordlist_file, raw_extension_list, thread

    args, _ = getopt(sys.argv[1:], 'u:w:e:t:', ['url=', 'wordlist=', 'extension=', 'thread='])

    if len(args) == 0:
        print("Example usage: dirbuster.py -u 127.0.0.1/dirbuster_target -w wordlist.txt -e php,txt -t 20")
        return

    for k, v in args:
        if k in ['-u', '--url']:
            url = v
        elif k in ['-w', '--wordlist']:
            wordlist_file = v
        elif k in ['-e', '--extension']:
            raw_extension_list = v
        elif k in ['-t', '--thread']:
            thread = int(v)
    
    process()

def process():
    global wordlist, extensions

    wordlist = init_wordlist()
    extensions = init_extensions()

    build_brute_list('')
    run_dirbuster()


def run_dirbuster():
    thread_list = []
    
    for _ in range(thread):
        t = Thread(target=worker)
        t.start()
        thread_list.append(t)

    for t in thread_list:
        t.join()

def worker():
    while not word_queue.empty():
        word = word_queue.get()

        # check_path return true if a dir is found
        # recursively build another path from wordlist
        if check_path(word):
            build_brute_list(word)

def check_path(path):
    try:
        response = requests.get(f'http://{url}{path}')
        status_code = response.status_code
    except requests.exceptions.HTTPError:
        print('wrong url')
        sys.exit(0)

    # check if status code is in 200 range or 403 (forbidden)
    if status_code / 100 == 2 or status_code == 403:
        if '.' in path:
            if status_code == 403:
                print(f'Found forbidden file at {path}')
            else:
                print(f'Found file at {path} ({status_code})')
        else:
            if status_code == 403:
                print(f'Found forbidden dir at {path}')
            else:
                print(f'Found dir at {path} ({status_code})')
            return True
    
    return False

def build_brute_list(path):
    for word in wordlist:
        # add dir
        word_queue.put(f'{path}/{word}')
        
        # add file
        for extension in extensions:
            word_queue.put(f'{path}/{word}.{extension}')

def init_wordlist():
    wordlist = []
    filelist = open(wordlist_file, 'r')
    for file in filelist:
        wordlist.append(file.strip("\n"))
    filelist.close()

    return wordlist

def init_extensions():
    return raw_extension_list.split(',')

if __name__ == "__main__":
    main()